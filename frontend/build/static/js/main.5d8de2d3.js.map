{"version":3,"file":"static/js/main.5d8de2d3.js","mappings":"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","sources":["index.js"],"sourcesContent":["// THIS IS THE BACKEND SERVER\nconst express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\nconst morgan = require(\"morgan\");\nconst path = require('path'); // This is required to resolve the file path\n\nrequire(\"dotenv\").config();\n\nconst cors = require(\"cors\");\nconst Person = require(\"./models/person\");\n\nconst PORT = process.env.PORT || 3001;\nconst MONGODB_URI = process.env.MONGODB_URI;\n\n// Connect to MongoDB\nmongoose\n  .connect(MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => {\n    console.log('Connected to MongoDB');\n  })\n  .catch((error) => {\n    console.error('Error connecting to MongoDB:', error.message);\n  });\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(morgan(\"tiny\"));\n\n// Serve static files from the 'frontend/build' directory\napp.use(express.static(path.join(__dirname, 'build')));\n\n// Custom token for morgan to log the request body for POST requests\nmorgan.token(\"req-body\", (req) => { \n  if (req.method === 'POST') {\n    return JSON.stringify(req.body);\n  }\n  return \"\";\n});\n\n// Middleware for logging with custom format\napp.use(morgan(\":method :url :status :res[content-length] - :response-time ms :req-body\"));\n\n// API routes\napp.get(\"/api/persons\", (req, res, next) => {\n  Person.find({})\n    .then((persons) => {\n      if (persons) {\n        res.json(persons);\n      } else {\n        res.status(404).end();\n      }\n    })\n    .catch((error) => next(error));\n});\n\napp.post(\"/api/persons\", (req, res, next) => {\n  const body = req.body;\n\n  if (body.name === undefined) {\n    return res.status(400).json({ error: \"name missing\" });\n  }\n\n  const person = new Person({\n    name: body.name,\n    number: body.number,\n  });\n\n  person.save()\n    .then((savedPerson) => {\n      res.json(savedPerson);\n    })\n    .catch((error) => next(error));\n});\n\napp.delete(\"/api/persons/:id\", (req, res, next) => {\n  Person.findByIdAndDelete(req.params.id)\n    .then(() => {\n      res.status(204).end();\n    })\n    .catch((error) => next(error));\n});\n\napp.put(\"/api/persons/:id\", (req, res, next) => {\n  const { name, number } = req.body;\n\n  Person.findByIdAndUpdate(\n    req.params.id,\n    { name, number },\n    { new: true, runValidators: true, context: 'query' }\n  )\n    .then((updatedPerson) => {\n      if (updatedPerson) {\n        res.json(updatedPerson);\n      } else {\n        res.status(404).end();\n      }\n    })\n    .catch((error) => next(error));\n});\n\napp.get(\"/api/persons/:id\", (req, res, next) => {\n  Person.findById(req.params.id)\n    .then((person) => {\n      if (person) {\n        res.json(person);\n      } else {\n        res.status(404).end();\n      }\n    })\n    .catch((error) => next(error));\n});\n\napp.get(\"/info\", (req, res, next) => {\n  Person.find()\n    .then(personEntry => {\n      res.send(`Phonebook has info for ${personEntry.length} people.\\n ${Date()}`);\n    })\n    .catch((error) => next(error));\n});\n\n// Wildcard route to serve the frontend (React) for any other requests\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\n// Error handling middleware\nconst errorHandler = (error, request, response, next) => {\n  console.error(error.message);\n\n  if (error.name === \"CastError\") {\n    return response.status(400).send({ error: 'malformatted id' });\n  } else if (error.name === 'ValidationError') {\n    return response.status(400).json({ error: error.message });\n  }\n\n  next(error);\n};\n\n// this has to be the last loaded middleware, also all the routes should be registered before this!\napp.use(errorHandler);\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n"],"names":["express","require","app","mongoose","morgan","path","config","cors","Person","PORT","process","MONGODB_URI","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","error","message","use","json","static","join","__dirname","token","req","method","JSON","stringify","body","get","res","next","find","persons","status","end","post","undefined","name","number","save","savedPerson","delete","findByIdAndDelete","params","id","put","findByIdAndUpdate","new","runValidators","context","updatedPerson","findById","person","personEntry","send","length","Date","sendFile","errorHandler","request","response","listen"],"sourceRoot":""}